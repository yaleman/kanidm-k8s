---
kind: Namespace
apiVersion: v1
metadata:
  name: kanidmd
  labels:
    pod-security.kubernetes.io/enforce: restricted
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: kanidmd
  name: kanidmd-server-toml
data:
  server.toml: |-
    #   The webserver bind address. Will use HTTPS if tls_* is provided.
    #   Defaults to "127.0.0.1:8443"
    bindaddress = "[::]:8443"
    #
    #   The read-only ldap server bind address. The server will use LDAPS if tls_* is provided.
    #   Defaults to "" (disabled)
    ldapbindaddress = "[::]:3636"
    #
    #   The path to the kanidm database.
    db_path = "/db/kanidm.db"
    #
    #   If you have a known filesystem, kanidm can tune sqlite to match. Valid choices are:
    #   [zfs, other]
    #   If you are unsure about this leave it as the default (other). After changing this
    #   value you must run a vacuum task.
    #   - zfs:
    #     * sets sqlite pagesize to 64k. You must set recordsize=64k on the zfs filesystem.
    #   - other:
    #     * sets sqlite pagesize to 4k, matching most filesystems block sizes.
    # db_fs_type = "zfs"
    #
    #   The number of entries to store in the in-memory cache.
    #   Minimum value is 256. If unset an automatic heuristic is used to scale this.
    # db_arc_size = 2048
    #
    #   TLS chain and key in pem format. Both must be commented, or both must be present
    # tls_chain = "/data/chain.pem"
    # tls_key = "/data/key.pem"
    #
    #   The log level of the server. May be default, verbose,
    #   perfbasic, perffull
    #   Defaults to "default"
    # log_level = "default"
    #
    #   The DNS domain name of the server. This is used in a
    #   number of security-critical contexts
    #   such as webauthn, so it *must* match your DNS
    #   hostname. It is used to create
    #   security principal names such as `william@idm.example.com`
    #   so that in a (future)
    #   trust configuration it is possible to have unique Service
    #   Principal Names (spns) throughout the topology.
    #   ⚠️  WARNING ⚠️
    #   Changing this value WILL break many types of registered
    #   credentials for accounts
    #   including but not limited to webauthn, oauth tokens, and more.
    #   If you change this value you *must* run
    #   `kanidmd domain_name_change` immediately after.
    domain = "idm.example.com"
    #
    #   The origin for webauthn. This is the url to the server,
    #   with the port included if
    #   it is non-standard (any port except 443). This must match
    #   or be a descendent of the
    #   domain name you configure above. If these two items are
    #   not consistent, the server WILL refuse to start!
    #   origin = "https://idm.example.com"
    origin = "https://idm.example.com"
    #
    #   The role of this server. This affects available features
    #   and how replication may interact.
    #   Valid roles are:
    #   - WriteReplica
    #     This server provides all functionality of Kanidm. It
    #     allows authentication, writes, and
    #     the web user interface to be served.
    #   - WriteReplicaNoUI
    #     This server is the same as a WriteReplica, but does NOT
    #     offer the web user interface.
    #   - ReadOnlyReplica
    #     This server will not writes initiated by clients. It
    #     supports authentication and reads,
    #     and must have a replication agreement as a source of
    #     its data.
    #   Defaults to "WriteReplica".
    role = "WriteReplicaNoUI"
    #
    [online_backup]
    #   The path to the output folder for online backups
    path = "/db/backups/"
    #   The schedule to run online backups (see https://crontab.guru/)
    #   every day at 22:00 UTC (default)
    # schedule = "00 22 * * *"
    #    four times a day at 3 minutes past the hour, every 6th hours
    # schedule = "03 */6 * * *"
    # every hour on the hour
    schedule = "0 * * * *"
    #   Number of backups to keep (default 7)
    versions = 48
    #
---
kind: PersistentVolume
apiVersion: v1
metadata:
  namespace: kanidmd
  name: kanidmd-db
spec:
  capacity:
   storage: 2Gi
  storageClassName: "local-storage"
  accessModes:
    - ReadWriteMany
  local:
    path: /tmp/kanidm-k8s
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - orbstack
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: kanidmd
  name: kanidmd-db
spec:
  selector:
    matchLabels:
      pv: kanidmd-db
  accessModes:
    - ReadWriteMany
  storageClassName: "local-storage"
  resources:
    requests:
      storage: 2Gi
  volumeName: kanidmd-db
---
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: kanidmd
  name: kanidmd
  labels:
    app: kanidmd
spec:
  selector:
    matchLabels:
      app: kanidmd
  replicas: 1
  template:
    metadata:
      labels:
        app: kanidmd
    spec:
      securityContext:
        runAsGroup: 5000
        runAsUser: 5000
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
      volumes:
      - name: kanidmd-db
        persistentVolumeClaim:
          claimName:  kanidmd-db
      - name: kanidmd-server-toml
        configMap:
          name: kanidmd-server-toml
          items:
            - key: server.toml
              path: server.toml
      containers:
      - name: kanidmd
        image: kanidm/server:latest
        ports:
        - name: https
          containerPort: 8443
        - name: ldaps
          containerPort: 3636
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - name: kanidmd-db
          mountPath: /db
        - name: kanidmd-server-toml
          mountPath: /data/server.toml # This should be your final destination
          subPath: server.toml
          readOnly: true
        resources:
          limits:
            memory: 1024Mi
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /status
            port: https
          initialDelaySeconds: 30
          periodSeconds: 5

---
kind: Service
apiVersion: v1
metadata:
  namespace: kanidmd
  name: kanidmd
spec:
  selector:
    app: kanidmd
  ports:
    # TODO: work out how to use ingress controllers :D
    - name: https
      protocol: TCP
      port: 8443
      targetPort: 8443
      nodePort: 30443
    - name: ldaps
      protocol: TCP
      port: 3636
      targetPort: 3636
      nodePort: 30636
  type: NodePort
---
